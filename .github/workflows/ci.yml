name: CI
on:
  workflow_dispatch:
    inputs:
      flavor:
        default: "dev"
        required: false
  push:
    branches:
      - '**'
      - '!gh-pages'
    tags:
      - 'v*'

env:
  FLUTTER_CHANNEL: "stable"
  FLUTTER_VERSION: "any"
  FLAVOR: ""

# Needed to deploy to GitHub Pages
permissions:
  contents: write

jobs:
  flutter_test:
    name: Run flutter test and analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # - name: Set Variables
      #   run: |
      #     echo "Inputs: ${{ toJSON(github.event.inputs) }}"

      #     is_tag_string=${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') }}
      #     is_tag=false
      #     if [ "$is_tag_string" = "true" ]; then
      #       is_tag=true
      #     fi

      #     flavor=""
      #     if $is_tag; then
      #       flavor="prod"
      #     elif [ -z "${{ github.event.inputs.flavor }}" ]; then
      #       flavor="dev"
      #     else
      #       flavor="${{ github.event.inputs.flavor }}"
      #     fi
      #     echo "FLAVOR=$flavor" >> $GITHUB_ENV
      #     echo "FLAVOR=$flavor"

      # - name: Print Variables
      #   run: |
      #     echo "Current Flavor: ${{ env.FLAVOR }}"

      # - name: Install and set Flutter version
      #   uses: subosito/flutter-action@v2
      #   with:
      #     channel: ${{env.FLUTTER_CHANNEL}}
      #     flutter-version: ${{env.FLUTTER_VERSION}}
      #     cache: true
      #     cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
      #     cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"
      #     architecture: x64

      # - name: Check Flutter Version
      #   run: flutter --version

      # # Make environment variables available to the melos generate script.
      # #
      # # The environment variables need to be defined in the repository secrets
      # - name: Load Environment Variables
      #   uses: oNaiPs/secrets-to-env-action@v1.2
      #   with:
      #     secrets: ${{ toJSON(secrets) }}

      # - name: Activate Melos
      #   run: dart pub global activate melos ^3.4.0

      # - name: Bootstrap Melos
      #   run: melos bootstrap

      # # Comment out this task if you don't want to enforce formatting.
      # - name: Verify Formatting
      #   run: melos run verify_format

      # - name: Run Dart Analyzer
      #   run: melos run analyze

      # - name: Run Custom Lints
      #   run: melos run custom_lint

      # # Project needs to have tests in test/ and a dependency on
      # # package:flutter_test for this step to succeed.
      # #
      # # Each package in the packages/ directory should have its own
      # # test/ directory with tests for that package.
      # - name: Run Tests
      #   run: melos run test

      # - name: Upload Coverage to Codecov
      #   uses: codecov/codecov-action@v3.1.0
      #   with:
      #     files: "**/*/lcov.info"

  build_ios:
    name: Build Flutter for iOS (Without Signing)
    needs: [flutter_test]
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Variables
        run: |
          echo "Inputs: ${{ toJSON(github.event.inputs) }}"

          is_tag_string=${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') }}
          is_tag=false
          if [ "$is_tag_string" = "true" ]; then
            is_tag=true
          fi

          flavor=""
          if $is_tag; then
            flavor="prod"
          elif [ -z "${{ github.event.inputs.flavor }}" ]; then
            flavor="dev"
          else
            flavor="${{ github.event.inputs.flavor }}"
          fi
          echo "FLAVOR=$flavor" >> $GITHUB_ENV
          echo "FLAVOR=$flavor"

      - name: Install and set Flutter version
        uses: subosito/flutter-action@v2
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"
          architecture: x64

      - name: Check Flutter Version
        run: flutter --version

      # Make environment variables available to the melos generate script.
      #
      # The environment variables need to be defined in the repository secrets
      - name: Load Environment Variables
        uses: oNaiPs/secrets-to-env-action@v1.2
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Activate Melos
        run: dart pub global activate melos ^3.4.0

      - name: Bootstrap Melos
        run: melos bootstrap

      # Zip into IPA from here:
      # https://gist.github.com/devhammed/617d920b7ee886591a46c22633ab0093
      - name: Build Flutter IPA
        run: |
          flutter build ios --release --no-codesign --dart-define FLAVOR=${{ env.FLAVOR }}
          cd build/ios/iphoneos
          mkdir Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r app-release.ipa Payload
          mv app-release.ipa flutter_boolean_template-${{ github.ref_name }}-ios.ipa
      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: flutter_boolean_template-${{ github.ref_name }}-ios
          path: build/ios/iphoneos/flutter_boolean_template-*.ipa
      - name: Release IPA
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          artifacts: build/ios/iphoneos/flutter_boolean_template-*.ipa
          allowUpdates: true

  # build_ios_with_signing:
  #   name: Build Flutter for iOS (Signed)
  #   needs: [flutter_test]
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       # From github documentation
  # 
  #     - name: Set Variables
  #       run: |
  #         echo "Inputs: ${{ toJSON(github.event.inputs) }}"
  # 
  #         is_tag_string=${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') }}
  #         is_tag=false
  #         if [ "$is_tag_string" = "true" ]; then
  #           is_tag=true
  #         fi
  # 
  #         flavor=""
  #         if $is_tag; then
  #           flavor="prod"
  #         elif [ -z "${{ github.event.inputs.flavor }}" ]; then
  #           flavor="dev"
  #         else
  #           flavor="${{ github.event.inputs.flavor }}"
  #         fi
  #         echo "FLAVOR=$flavor" >> $GITHUB_ENV
  #         echo "FLAVOR=$flavor"
  #
  #     - name: Install the Apple certificate, provisioning profile, and Firebase google services
  #       env:
  #         BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #         P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
  #         BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
  #         KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  #       run: |
  #         # create variables
  #         CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
  #         PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
  #         KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

  #         # import certificate and provisioning profile from secrets
  #         echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
  #         echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

  #         # create temporary keychain
  #         security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #         security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #         security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

  #         # import certificate to keychain
  #         security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #         security list-keychain -d user -s $KEYCHAIN_PATH

  #         # apply provisioning profile
  #         mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #         cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
  #
  #     - name: Install and set Flutter version
  #       uses: subosito/flutter-action@v2
  #       with:
  #         channel: ${{env.FLUTTER_CHANNEL}}
  #         flutter-version: ${{env.FLUTTER_VERSION}}
  #         cache: true
  #         cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
  #         cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'
  #         architecture: x64
  #     - run: flutter pub get
  #     - run: flutter clean
  #     # Zip into IPA from here:
  #     # https://gist.github.com/devhammed/617d920b7ee886591a46c22633ab0093
  #     - name: Build Flutter IPA
  #       run: |
  #         flutter build ios --release --no-codesign --dart-define FLAVOR=${{ env.FLAVOR }}
  #         cd build/ios/iphoneos
  #         mkdir Payload
  #         cd Payload
  #         ln -s ../Runner.app
  #         cd ..
  #         zip -r app-release.ipa Payload
  #         mv app-release.ipa flutter_boolean_template-${{ github.ref_name }}-ios.ipa
  #     - name: Upload IPA
  #       uses: actions/upload-artifact@v3
  #       with:
  #         path: build/ios/iphoneos/flutter_boolean_template-*.ipa
  #     - name: Release IPA
  #       if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
  #       uses: ncipollo/release-action@v1
  #       with:
  #         artifacts: build/ios/iphoneos/flutter_boolean_template-*.ipa
  #         allowUpdates: true

  build_android:
    name: Build Flutter for Android
    needs: [flutter_test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Variables
        run: |
          echo "Inputs: ${{ toJSON(github.event.inputs) }}"

          is_tag_string=${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') }}
          is_tag=false
          if [ "$is_tag_string" = "true" ]; then
            is_tag=true
          fi

          flavor=""
          if $is_tag; then
            flavor="prod"
          elif [ -z "${{ github.event.inputs.flavor }}" ]; then
            flavor="dev"
          else
            flavor="${{ github.event.inputs.flavor }}"
          fi
          echo "FLAVOR=$flavor" >> $GITHUB_ENV
          echo "FLAVOR=$flavor"

      - name: Install and set Flutter version
        uses: subosito/flutter-action@v2
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"
          architecture: x64

      - name: Check Flutter Version
        run: flutter --version

      # Make environment variables available to the melos generate script.
      #
      # The environment variables need to be defined in the repository secrets
      - name: Load Environment Variables
        uses: oNaiPs/secrets-to-env-action@v1.2
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Activate Melos
        run: dart pub global activate melos ^3.4.0

      - name: Bootstrap Melos
        run: melos bootstrap

      - name: Build Android Split Apk
        run: |
          flutter pub get
          flutter build apk --release --split-per-abi --dart-define FLAVOR=${{ env.FLAVOR }}
          cd build/app/outputs/flutter-apk
          mv app-arm64-v8a-release.apk flutter_boolean_template-${{ github.ref_name }}-android-arm64-v8a.apk
          mv app-armeabi-v7a-release.apk flutter_boolean_template-${{ github.ref_name }}-android-armeabi-v7a.apk
          mv app-x86_64-release.apk flutter_boolean_template-${{ github.ref_name }}-android-x86_64.apk

      - name: Upload Split APKs
        uses: actions/upload-artifact@v3
        with:
          name: flutter_boolean_template-${{ github.ref_name }}-android-split
          path: build/app/outputs/flutter-apk/flutter_boolean_template-*.apk

      - name: Release Split Apks
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          artifacts: build/app/outputs/flutter-apk/flutter_boolean_template-*.apk
          allowUpdates: true

      - name: Build Universal Apk
        run: |
          flutter pub get
          flutter build apk --release --dart-define FLAVOR=${{ env.FLAVOR }}
          cd build/app/outputs/flutter-apk
          mv app-release.apk flutter_boolean_template-${{ github.ref_name }}-android-universal.apk

      - name: Upload Universal APK
        uses: actions/upload-artifact@v3
        with:
          name: flutter_boolean_template-${{ github.ref_name }}-android-universal
          path: build/app/outputs/flutter-apk/flutter_boolean_template-${{ github.ref_name }}-android-universal.apk

      - name: Release Universal Apks
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          artifacts: build/app/outputs/flutter-apk/flutter_boolean_template-${{ github.ref_name }}-android-universal.apk
          allowUpdates: true

      - name: Build AppBundle
        run: |
          flutter pub get
          flutter build appbundle --release --dart-define FLAVOR=${{ env.FLAVOR }}
          cd build/app/outputs/bundle/release
          mv app-release.aab flutter_boolean_template-${{ github.ref_name }}-android-appbundle.aab

      - name: Upload Appbundle
        uses: actions/upload-artifact@v3
        with:
          name: flutter_boolean_template-${{ github.ref_name }}-android-appbundle
          path: build/app/outputs/bundle/release/*.aab
          
      - name: Release Appbundle
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          artifacts: build/app/outputs/bundle/release/flutter_boolean_template-*.aab
          allowUpdates: true

  build_windows:
    name: Build Flutter for Windows x64
    needs: [flutter_test]
    runs-on: windows-latest
    steps:
      # Need to enable long paths for Windows because the forked version of go_router
      # causes a long path error when building for Windows in CI
      - name: Enable Git Long Paths
        run: git config --system core.longpaths true
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Variables
        run: |
          $is_tag = "${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') }}"
          $flavor = "dev"
          if ($is_tag) {
              $flavor = "prod"
          }
          elseif ([string]::IsNullOrEmpty("${{ github.event.inputs.flavor }}")) {
              $flavor = "dev"
          }
          else {
              $flavor = "${{ github.event.inputs.flavor }}"
          }

          "FLAVOR=$flavor" | Out-File -Append -LiteralPath $Env:GITHUB_ENV
          Write-Output "FLAVOR=$flavor"
        shell: pwsh

        
      - name: Print Variables
        run: |
          Write-Output "Current Flavor: ${{ env.FLAVOR }}"

      - name: Install and set Flutter version
        uses: subosito/flutter-action@v2
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"
          architecture: x64

      - name: Check Flutter Version
        run: flutter --version

      # Make environment variables available to the melos generate script.
      #
      # The environment variables need to be defined in the repository secrets
      - name: Load Environment Variables
        uses: oNaiPs/secrets-to-env-action@v1.2
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Activate Melos
        run: dart pub global activate melos ^3.4.0

      - name: Bootstrap Melos
        run: melos bootstrap

      - name: Build Windows
        run: flutter build windows --dart-define FLAVOR=${{ env.FLAVOR }}
      
      - name: Build MSIX
        run: |
          dart run msix:create --build-windows false
          cd build\windows\x64\runner\Release
          mv flutter_boolean_template.msix flutter_boolean_template-${{ github.ref_name }}-windows.msix
      - name: Upload MSIX
        uses: actions/upload-artifact@v3
        with:
          name: flutter_boolean_template-${{ github.ref_name }}-windows
          path: build/windows/x64/runner/Release/*.msix
          
      - name: Release MSIX
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          artifacts: build/windows/x64/runner/Release/flutter_boolean_template-*.msix
          allowUpdates: true

  build_linux:
    name: Build Flutter for Linux
    needs: [flutter_test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Variables
        run: |
          echo "Inputs: ${{ toJSON(github.event.inputs) }}"

          is_tag_string=${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') }}
          is_tag=false
          if [ "$is_tag_string" = "true" ]; then
            is_tag=true
          fi

          flavor=""
          if $is_tag; then
            flavor="prod"
          elif [ -z "${{ github.event.inputs.flavor }}" ]; then
            flavor="dev"
          else
            flavor="${{ github.event.inputs.flavor }}"
          fi
          echo "FLAVOR=$flavor" >> $GITHUB_ENV
          echo "FLAVOR=$flavor"

      - name: Install and set Flutter version
        uses: subosito/flutter-action@v2
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"
          architecture: x64
      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install webkit2gtk-4.1 clang cmake ninja-build pkg-config libgtk-3-dev mpv libmpv-dev dpkg-dev
          sudo apt install -y libfuse2

      - name: Check Flutter Version
        run: flutter --version

      # Make environment variables available to the melos generate script.
      #
      # The environment variables need to be defined in the repository secrets
      - name: Load Environment Variables
        uses: oNaiPs/secrets-to-env-action@v1.2
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Activate Melos
        run: dart pub global activate melos ^3.4.0

      - name: Bootstrap Melos
        run: melos bootstrap

      - name: Build Linux
        run: flutter build linux --release --dart-define FLAVOR=${{ env.FLAVOR }}

      - name: Build AppImage
        run: |
          curl -JOL https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod a+x appimagetool-x86_64.AppImage
          mv appimagetool-x86_64.AppImage appimagetool

          mv build/linux/x64/release/bundle/{flutter_boolean_template,AppRun}
          cp linux/appimage/* build/linux/x64/release/bundle/
          ./appimagetool build/linux/x64/release/bundle/
          mv *.AppImage build/flutter_boolean_template-${{ github.ref_name }}-linux.AppImage

      - name: Upload AppImage
        uses: actions/upload-artifact@v3
        with:
          name: flutter_boolean_template-${{ github.ref_name }}-linux-appimage
          path: build/flutter_boolean_template-*.AppImage
          
      - name: Release AppImage
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          artifacts: build/flutter_boolean_template-*.AppImage
          allowUpdates: true

  build_macos:
    name: Build Flutter for MacOS
    needs: [flutter_test]
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Variables
        run: |
          echo "Inputs: ${{ toJSON(github.event.inputs) }}"

          is_tag_string=${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') }}
          is_tag=false
          if [ "$is_tag_string" = "true" ]; then
            is_tag=true
          fi

          flavor=""
          if $is_tag; then
            flavor="prod"
          elif [ -z "${{ github.event.inputs.flavor }}" ]; then
            flavor="dev"
          else
            flavor="${{ github.event.inputs.flavor }}"
          fi
          echo "FLAVOR=$flavor" >> $GITHUB_ENV
          echo "FLAVOR=$flavor"

      - name: Install and set Flutter version
        uses: subosito/flutter-action@v2
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"
          architecture: x64

      - name: Check Flutter Version
        run: flutter --version

      # Make environment variables available to the melos generate script.
      #
      # The environment variables need to be defined in the repository secrets
      - name: Load Environment Variables
        uses: oNaiPs/secrets-to-env-action@v1.2
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Activate Melos
        run: dart pub global activate melos ^3.4.0

      - name: Bootstrap Melos
        run: melos bootstrap

      - name: Build MacOS
        run: |
          git config --global core.longpaths true
          flutter pub get
          flutter build macos --release --dart-define FLAVOR=${{ env.FLAVOR }}
      
      - name: Build DMG
        run: |
          brew install create-dmg 
          create-dmg --volname flutter_boolean_template-${{ github.ref_name }}-macos --window-pos 200 120 --window-size 800 450 --icon-size 100 --app-drop-link 600 185 flutter_boolean_template-${{ github.ref_name }}-macos.dmg build/macos/Build/Products/Release/flutter_boolean_template.app
      
      - name: Upload DMG
        uses: actions/upload-artifact@v3
        with:
          name: flutter_boolean_template-${{ github.ref_name }}-macos
          path: "/Users/runner/work/flutter_boolean_template/flutter_boolean_template/*.dmg"
          
      - name: Release DMG
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          artifacts: /Users/runner/work/flutter_boolean_template/flutter_boolean_template/flutter_boolean_template-*.dmg
          allowUpdates: true
  build_web:
    name: Build Flutter for Web
    needs: [flutter_test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Variables
        run: |
          echo "Inputs: ${{ toJSON(github.event.inputs) }}"

          is_tag_string=${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') }}
          is_tag=false
          if [ "$is_tag_string" = "true" ]; then
            is_tag=true
          fi

          flavor=""
          if $is_tag; then
            flavor="prod"
          elif [ -z "${{ github.event.inputs.flavor }}" ]; then
            flavor="dev"
          else
            flavor="${{ github.event.inputs.flavor }}"
          fi
          echo "FLAVOR=$flavor" >> $GITHUB_ENV
          echo "FLAVOR=$flavor"

      - name: Install and set Flutter version
        uses: subosito/flutter-action@v2
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Check Flutter Version
        run: flutter --version

      # Make environment variables available to the melos generate script.
      #
      # The environment variables need to be defined in the repository secrets
      - name: Load Environment Variables
        uses: oNaiPs/secrets-to-env-action@v1.2
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Activate Melos
        run: dart pub global activate melos ^3.4.0

      - name: Bootstrap Melos
        run: melos bootstrap

      - name: Build Web
        run: |
          flutter pub get
          flutter build web --dart-define FLAVOR=${{ env.FLAVOR }} --release --web-renderer=canvaskit
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: flutter_boolean_template-${{ github.ref_name }}-web
          path: build/web

  deploy_web:
    name: Deploy Flutter Web to GitHub Pages
    runs-on: ubuntu-latest
    needs: [flutter_test]
    environment: ci
    if: github.event_name == 'push' && !startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install and set Flutter version
        if: github.actor != 'dependabot[bot]'
        uses: subosito/flutter-action@v2
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"
      - name: Get branch name
        id: branch-name
        if: github.actor != 'dependabot[bot]'
        uses: tj-actions/branch-names@v8
      - name: Build Web
        if: github.actor != 'dependabot[bot]'
        run: |
          flutter pub get
          flutter build web --dart-define FLAVOR=staging --release --web-renderer=canvaskit --base-href="/${{ github.event.repository.name }}/${{ steps.branch-name.outputs.current_branch }}/"
      - name: Deploy to GitHub Pages 🚀
        if: github.actor != 'dependabot[bot]'
        uses: JamesIves/github-pages-deploy-action@releases/v4
        with:
          # PAT required to trigger gh_pages_readme.yml workflow
          token: ${{ secrets.PAT }}
          branch: gh-pages # The branch the action should deploy to.
          folder: build/web # The folder the action should deploy.
          target-folder: "${{ steps.branch-name.outputs.current_branch }}"

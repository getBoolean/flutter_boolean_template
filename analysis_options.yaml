# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:very_good_analysis/analysis_options.yaml

analyzer:
  # Default for very_good_analysis
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

  errors:
    # Stop todos from showing in the "Problems" tab so that it can stay focused
    # on actual problems. I recommended using an extension such as Todo Tree instead.
    todo: ignore
    # Required for Freezed
    invalid_annotation_target: ignore
    # Default for very_good_analysis
    close_sinks: ignore
    # Default for very_good_analysis
    missing_required_param: error
    # Default for very_good_analysis
    missing_return: error
  exclude:
    - lib/generated_plugin_registrant.dart
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "**/*.iconfig.dart"
    # This is generated from the i18n vscode extension
    - "**/i18n.dart"
    - "lib/generated/intl/messages*.dart"

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # Type annotations are sometimes necessary for readability
    #
    # Note: incompatible with `always_specify_types`
    omit_local_variable_types: false

    # Consider enabling this rule to make code more readable
    # during code reviews.
    #
    # Note, incompatible with `omit_local_variable_types`
    always_specify_types: false

    # Better to leave it up to the programmer
    prefer_int_literals: false

    # It is better to group related packages
    sort_pub_dependencies: false

    # It is good practice to keep lines shorter, but sometimes it is
    # difficult to keep it readable and under 80 characters
    lines_longer_than_80_chars: false

    # When mixing relative and absolute imports itâ€™s possible to create
    # confusion where the same member gets imported in two different ways.
    prefer_relative_imports: false
    always_use_package_imports: true

    # Avoid annotating with dynamic when not required.
    avoid_annotating_with_dynamic: true

    # Use throwsA matcher instead of fail().
    use_test_throws_matchers: true
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
